Write-Output "Starting CRUD API Tests"

# Helper function to generate a random string
function Get-RandomString {
	param (
		[int]$Length = 10
	)
	return -join ((65..90) + (97..122) | Get-Random -Count $Length | ForEach-Object {[char]$_})
}

# Helper function to create a test feature
function New-TestCRUD {
	$randomApp = Get-RandomString
	$randomCRUD = Get-RandomString
	$validTags = @("bug", "enhancement", "documentation", "duplicate", "denied")
	$randomTag = $validTags | Get-Random

	return @{
		application = $randomApp
		featureName = $randomCRUD
		tag = $randomTag
	}
}

# Helper function to compare two feature objects
function Compare-CRUDs {
	param (
		$Expected,
		$Actual
	)
	$Expected.application -eq $Actual.application -and
	$Expected.featureName -eq $Actual.featureName -and
	$Expected.tag -eq $Actual.tag
}


Describe "CRUD API Tests" {
	BeforeAll {
		Write-Output "BeforeAll block started"

		# Wait for the server to start (adjust the timeout as needed)
		$timeout = 30
		$timer = [System.Diagnostics.Stopwatch]::StartNew()
		$serverReady = $false

		while ($timer.Elapsed.TotalSeconds -lt $timeout -and -not $serverReady) {
			try {
				$null = Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Get -ErrorAction Stop
				$serverReady = $true
				Write-Output "Server is ready"
			}
			catch {
				Write-Output "Waiting for server to start..."
				Start-Sleep -Seconds 2
			}
		}
		Start-Sleep -Seconds 2

		$timer.Stop()

		if (-not $serverReady) {
			throw "Server did not start within the expected timeout."
		}
		Write-Output "BeforeAll block completed"
	}

	AfterAll {
		Write-Output "AfterAll block started"
		Write-Output "AfterAll block completed"
	}

	BeforeEach {
		# Clear the database before each test
		try {
			$clearDbResponse = Invoke-RestMethod -Uri "http://localhost:8433/api/clear" -Method Get
			Write-Output "Cleared database before test: $($clearDbResponse.message)"
		} catch {
			throw "Failed to clear the database: $_"
		}
	}

	Context "GET /api/features" {
		It "Should return all features when no tag filter is provided" {
			Write-Output "Running test: Should return all features when no tag filter is provided"
			# Create some test features
			$testCRUDs = @(
				@{ application = "TestApp1"; featureName = "TestCRUD1"; tag = "bug" },
				@{ application = "TestApp2"; featureName = "TestCRUD2"; tag = "enhancement" }
			)
			foreach ($feature in $testCRUDs) {
				Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Post -Body ($feature | ConvertTo-Json) -ContentType "application/json"
			}

			$response = Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Get
			$response.features | Should -Not -BeNullOrEmpty
			$response.features.Count | Should -Be 2
			$response.features | ForEach-Object {
				$_ | Should -HaveProperty 'application'
				$_ | Should -HaveProperty 'featureName'
				$_ | Should -HaveProperty 'tag'
			}
			Write-Output "Test completed"
		}

		It "Should filter features by tag when tagFilter is provided" {
			Write-Output "Running test: Should filter features by tag when tagFilter is provided"
			# Create test features with known tags
			$testCRUDs = @(
				@{ application = "TestApp1"; featureName = "TestCRUD1"; tag = "documentation" },
				@{ application = "TestApp2"; featureName = "TestCRUD2"; tag = "duplicate" }
			)
			foreach ($feature in $testCRUDs) {
				Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Post -Body ($feature | ConvertTo-Json) -ContentType "application/json"
			}

			$response = Invoke-RestMethod -Uri "http://localhost:8433/api/features?tagFilter=documentation" -Method Get
			$response.features | Should -Not -BeNullOrEmpty
			$response.features.Count | Should -Be 1
			$response.features[0].tag | Should -Be "documentation"
			Write-Output "Test completed"
		}

		It "Should return paginated results" {
			Write-Output "Running test: Should return paginated results"
			# Create 15 test features
			$validTags = @("bug", "enhancement", "documentation", "duplicate", "denied")
			for ($i = 1; $i -le 15; $i++) {
				$feature = @{
					application = "TestApp$i"
					featureName = "TestCRUD$i"
					tag = $validTags[$i % 5]
				}
				Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Post -Body ($feature | ConvertTo-Json) -ContentType "application/json"
			}

			$response = Invoke-RestMethod -Uri "http://localhost:8433/api/features?page=1&pageSize=10" -Method Get
			$response.features.Count | Should -Be 10
			$response.totalItems | Should -Be 15
			$response.currentPage | Should -Be 1
			$response.hasNextPage | Should -Be $true

			$response = Invoke-RestMethod -Uri "http://localhost:8433/api/features?page=2&pageSize=10" -Method Get
			$response.features.Count | Should -Be 5
			$response.currentPage | Should -Be 2
			$response.hasNextPage | Should -Be $false
			$response.features | ForEach-Object {
				$_ | Should -HaveProperty 'application'
				$_ | Should -HaveProperty 'featureName'
				$_ | Should -HaveProperty 'tag'
			}
			Write-Output "Test completed"
		}
	}

	Context "POST /api/features" {
		It "Should create a new feature" {
			Write-Output "Running test: Should create a new feature"
			$newCRUD = @{
				application = "TestApp3"
				featureName = "TestCRUD3"
				tag = "denied"
			}
			$response = Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Post -Body ($newCRUD | ConvertTo-Json) -ContentType "application/json"
			$response.message | Should -Be "CRUD created successfully"

			# Verify the feature was created
			$allCRUDs = Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Get
			$createdCRUD = $allCRUDs.features | Where-Object { $_.application -eq "TestApp3" -and $_.featureName -eq "TestCRUD3" }
			$createdCRUD | Should -Not -BeNullOrEmpty
			$createdCRUD.tag | Should -Be "denied"
			Write-Output "Test completed"
		}
	}

	Context "PUT /api/features" {
		It "Should update an existing feature" {
			Write-Output "Running test: Should update an existing feature"
			# First, create a feature to update
			$newCRUD = @{
				application = "TestApp4"
				featureName = "TestCRUD4"
				tag = "bug"
			}
			Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Post -Body ($newCRUD | ConvertTo-Json) -ContentType "application/json"

			# Get the ID of the created feature
			$features = Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Get
			$featureToUpdate = $features.features | Where-Object { $_.application -eq "TestApp4" -and $_.featureName -eq "TestCRUD4" } | Select-Object -First 1

			# Update the feature
			$updatedCRUD = @{
				id = $featureToUpdate.id
				application = "TestApp4Updated"
				featureName = "TestCRUD4Updated"
				tag = "enhancement"
				rank = 2
			}
			$response = Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Put -Body ($updatedCRUD | ConvertTo-Json) -ContentType "application/json"
			$response.message | Should -Be "CRUD updated successfully"

			# Verify the update
			$updatedCRUDs = Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Get
			$updatedCRUD = $updatedCRUDs.features | Where-Object { $_.id -eq $featureToUpdate.id } | Select-Object -First 1
			$updatedCRUD.application | Should -Be "TestApp4Updated"
			$updatedCRUD.featureName | Should -Be "TestCRUD4Updated"
			$updatedCRUD.tag | Should -Be "enhancement"
			$updatedCRUD | Should -HaveProperty 'rank'
			$updatedCRUD.rank | Should -Be 2
			Write-Output "Test completed"
		}
	}

	Context "DELETE /api/features" {
		It "Should delete an existing feature" {
			Write-Output "Running test: Should delete an existing feature"
			# First, create a feature to delete
			$newCRUD = @{
				application = "TestApp5"
				featureName = "TestCRUD5"
				tag = "documentation"
			}
			Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Post -Body ($newCRUD | ConvertTo-Json) -ContentType "application/json"

			# Get the ID of the created feature
			$features = Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Get
			$featureToDelete = $features.features | Where-Object { $_.application -eq "TestApp5" -and $_.featureName -eq "TestCRUD5" } | Select-Object -First 1

			# Delete the feature
			$response = Invoke-RestMethod -Uri "http://localhost:8433/api/features?id=$($featureToDelete.id)" -Method Delete
			$response.message | Should -Be "CRUD deleted successfully"

			# Verify the deletion
			$updatedCRUDs = Invoke-RestMethod -Uri "http://localhost:8433/api/features" -Method Get
			$updatedCRUDs.features | Where-Object { $_.id -eq $featureToDelete.id } | Should -BeNullOrEmpty
			Write-Output "Test completed"
		}
	}
}

Write-Output "CRUD API Tests completed"
